@using RockPaperScissors.Models
@using RockPaperScissors.Services
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject GameStateService gameState
@inject NameService nameService



<div class="top-row ps-3">
    <div class="container-fluid h-100 align-items-center d-flex justify-content-between">
        <span class="page-title">Rock Paper Scissors</span>
        <button title="Menu" class="menu-toggler h-75" @onclick="ToggleMenu">
            <i class="fa-solid fa-bars" style="color: #ffffff;"></i>
        </button>
    </div>
</div>

<div class="@MenuCssClass menu-container container-fluid position-absolute p-3">
    <div class="container-fluid menu">
        <div class="container">
            <span class="row">@($"{gameState.GamesPlayed} games played")</span>
            <span class="row mb-3">@($"{gameState.WinRate}% won")</span>

            <span class="row">@($"{gameState.Wins} wins")</span>
            <span class="row">@($"{gameState.Draws} draws")</span>
            <span class="row mb-3">@($"{gameState.Losses} losses")</span>
        </div>
        <div class="d-grid gap-2">
            <label class="container mb-2">
                <span class ="row">Rock:</span>
                <input type="text" value="@nameService.RockName" maxlength="10" class="row" @oninput="OnRockNameChanged" />
            </label>
            <label class="container mb-2">
                <span class="row">Paper:</span>
                <input type="text" value="@nameService.PaperName" maxlength="10" class="row" @oninput="OnPaperNameChanged" />
            </label>
            <label class="container mb-2">
                <span class="row">Scissors:</span>
                <input type="text" value="@nameService.ScissorsName" maxlength="10" class="row" @oninput="OnScissorsNameChanged" />
            </label>
        </div>
        <div class="d-grid gap-2 mt-5">
            <button type="button" class="btn btn-light border border-dark" @onclick="nameService.GetRandomNames">Get random names</button>
            <button type="button" class="btn btn-light border border-dark" @onclick="Reset">Reset</button>
        </div>
    </div>
</div>

@code {
    private bool collapseMenu = true;

    private string? MenuCssClass => collapseMenu ? "collapse" : null;

    private void ToggleMenu()
    {
        collapseMenu = !collapseMenu;
    }

    private async void OnRockNameChanged(ChangeEventArgs e) => await nameService.OnNameChanged(Hand.Rock, e.Value?.ToString());
    private async void OnPaperNameChanged(ChangeEventArgs e) => await nameService.OnNameChanged(Hand.Paper, e.Value?.ToString());
    private async void OnScissorsNameChanged(ChangeEventArgs e) => await nameService.OnNameChanged(Hand.Scissors, e.Value?.ToString());

    private async Task Reset()
    {
        await gameState.ResetStatistics();
        await nameService.ResetNames();
    }

    protected override async Task OnInitializedAsync()
    {
        gameState.OnChange.Add(StateHasChanged);
        nameService.OnChange.Add(StateHasChanged);

        await gameState.LoadStatistics();
        await nameService.LoadNames();
    }
}