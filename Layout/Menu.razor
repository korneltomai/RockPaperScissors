@using RockPaperScissors.Services
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject GameStateService gameState



<div class="top-row ps-3">
    <div class="container-fluid h-100 align-items-center d-flex justify-content-between">
        <span class="page-title">Rock Paper Scissors</span>
        <button title="Menu" class="menu-toggler h-75" @onclick="ToggleMenu">
            <i class="fa-solid fa-bars" style="color: #ffffff;"></i>
        </button>
    </div>
</div>

<div class="@MenuCssClass menu-container container-fluid position-absolute p-3">
    <div class="container-fluid menu">
        <div class="container">
            <span class="row">@($"{gameState.GamesPlayed} games played")</span>
            <span class="row mb-3">@($"{gameState.WinRate}% won")</span>

            <span class="row">@($"{gameState.Wins} wins")</span>
            <span class="row">@($"{gameState.Draws} draws")</span>
            <span class="row mb-3">@($"{gameState.Losses} losses")</span>
        </div>
        <div class="d-grid gap-2">
            <label class="container mb-2">
                <span class ="row">Rock:</span>
                <input type="text" value="@gameState.RockName" class="row" @oninput="OnRockNameChanged" />
            </label>
            <label class="container mb-2">
                <span class="row">Paper:</span>
                <input type="text" value="@gameState.PaperName" class="row" @oninput="OnPaperNameChanged" />
            </label>
            <label class="container mb-2">
                <span class="row">Scissors:</span>
                <input type="text" value="@gameState.ScissorsName" class="row" @oninput="OnScissorsNameChanged" />
            </label>
        </div>
        <div class="d-grid gap-2 mt-5">
            <button type="button" class="btn btn-light" @onclick="GetRandomNames">Get random names</button>
            <button type="button" class="btn btn-light" @onclick="ResetGameState">Reset</button>
        </div>
    </div>
</div>

@code {
    private bool collapseMenu = true;

    private string? MenuCssClass => collapseMenu ? "collapse" : null;

    private void ToggleMenu()
    {
        collapseMenu = !collapseMenu;
    }

    private async void OnRockNameChanged(ChangeEventArgs e)
    {
        await localStorage.SetItemAsync<string>("rockName", e.Value?.ToString() ?? "Rock");
        await gameState.UpdateNames();
    }

    private async void OnPaperNameChanged(ChangeEventArgs e)
    {
        await localStorage.SetItemAsync<string>("paperName", e.Value?.ToString() ?? "Paper");
        await gameState.UpdateNames();
    }
    private async void OnScissorsNameChanged(ChangeEventArgs e)
    {
        await localStorage.SetItemAsync<string>("scissorsName", e.Value?.ToString() ?? "Scissors");
        await gameState.UpdateNames();
    }

    private async void ResetGameState()
    {
        await localStorage.SetItemAsync<int>("wins", 0);
        await localStorage.SetItemAsync<int>("draws", 0);
        await localStorage.SetItemAsync<int>("losses", 0);
        await gameState.UpdateStatistics();

        await localStorage.SetItemAsync<string>("rockName", "Rock");
        await localStorage.SetItemAsync<string>("paperName", "Paper");
        await localStorage.SetItemAsync<string>("scissorsName", "Scissors");
        await gameState.UpdateNames();
    }

    private async void GetRandomNames()
    {
        try
        {
            List<string> words = (await Http.GetFromJsonAsync<List<string>>(Configuration["RandomWordApiBaseUrl"] + "random/noun?count=3"))!;
            await localStorage.SetItemAsync<string>("rockName", words[0]);
            await localStorage.SetItemAsync<string>("paperName", words[1]);
            await localStorage.SetItemAsync<string>("scissorsName", words[2]);
            await gameState.UpdateNames();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        gameState.OnChange.Add(StateHasChanged);
        await gameState.UpdateStatistics();
        await gameState.UpdateNames();
    }
}