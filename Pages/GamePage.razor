@page "/"
@using RockPaperScissors.Models
@using RockPaperScissors.Services
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject GameStateService gameState

<div class="d-grid h-100">
    <div>
        <div class="container-fluid d-flex align-items-center justify-content-center h-100 p-0">
            <div>
                <p class="fs-2 text-center">Opponent</p>
                <div class="opponentHand row d-flex align-items-center justify-content-center bg-danger mw-25 mh-25 m-1 border border-dark rounded">
                    <span class="text-light">@OpponentHand</span>
                </div>
            </div>
        </div>
    </div>
    <div class="container-fluid d-flex align-items-center justify-content-center h-100 p-0">
        <p class="fs-1">@($"{GameOutcome.ToString()}")</p>
    </div>
    <div class="container-fluid d-flex align-items-center justify-content-center h-100 p-0">
        <div>
            <p class="fs-2 text-center">Player</p>
            <div class="row">
                <HandButton ButtonText="@gameState.RockName" OnClickCallback="@PlayRock" />
                <HandButton ButtonText="@gameState.PaperName" OnClickCallback="@PlayPaper" />
                <HandButton ButtonText="@gameState.ScissorsName" OnClickCallback="@PlayScissors" />
            </div>
        </div>
    </div>
</div>


@code {

    GameModel Game { get; set; } = default!;
    string OpponentHand { get; set; } = string.Empty;
    string GameOutcome { get; set; } = string.Empty;

    void PlayRock() => PlayRound(Hand.Rock);
    void PlayPaper() => PlayRound(Hand.Paper);
    void PlayScissors() => PlayRound(Hand.Scissors);

    async void PlayRound(Hand playerHand)
    {
        Hand randomHand = (Hand)new Random().Next(3);
        OpponentHand = randomHand.ToString();
        GameOutcome = (await Game.PlayRound(playerHand, randomHand)).ToString();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        Game = new GameModel(localStorage, gameState);
        gameState.OnChange.Add(StateHasChanged);
    }
}